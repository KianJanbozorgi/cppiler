parse_table = {
    "Start": {"using": "S N M", "int": "S N M"},
    "S": { "using": "ε", "int": "ε"},
    "N": {"using": "using namespace std ;", "int": "ε"},
    "M": {"int": "int main ( ) { T V }"},
    "T": {
        "float": "Id T",
        "int": "Id T",
        "identifier": "L T",
        "while": "Loop T",
        "cin": "Input T",
        "cout": "Output T",
        "}": "ε",
        'return': "ε"
    },
    "V": {"return": "return 0 ;"},
    "Id": {"int": "int L", "float": "float L"},
    "L": {"identifier": "identifier Assign Z"},
    "Z": {",": ", identifier Assign Z ;" , ';':";"},
    "Operation": {"number": "number P", "identifier": "identifier P"},
    "P": {
        "+": "O W P",
        "*": "O W P",
        "-": "O W P",
        "==": "ε",
        "!=": "ε",
        ",": "ε",
        "<=": "ε",
        ";": "ε",
        ">=": "ε",
        ")": "ε"
    },
    "O": {"+": "+", "-": "-", "*": "*"},
    "W": {"number": "number", "identifier": "identifier"},
    "Assign": {'=': '= Operation', ";": "ε", ",": "ε"},
    "Expression": {"identifier": "Operation K Operation", "number": "Operation K Operation"},
    "K": {"==": "==", ">=": ">=", "<=": "<=", "!=": "!="},
    "Loop": {"while": "while ( Expression ) { T }"},
    "Input": {"cin": "cin >> identifier F"},
    "F": {
        ">>": ">> identifier F",
        "float": "ε",
        "cout": "ε",
        "cin": "ε",
        "identifier": "ε",
        "while ( Expression ) { T }": "ε",
        "int": "ε",
        ";": ";",
    },
    "Output": {"cout": "cout << C H ;"},
    "H": {"<<": "<< C H" , ";": ";"},
    "C": {"number": "number", "string": "string", "identifier": "identifier"},
}